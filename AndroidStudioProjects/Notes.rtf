{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww26860\viewh14440\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 SETTING UP ANDROID STUDIO\
1. Change themes and fonts\
2. Enable auto import: Preferences>Editor>General>Auto import (All & unambiguous imports)\
3. Auto generate boiler plate code & setting up naming conventions: Preferences>Editor>Code style>Java>code generation:(Field:m, Static:s)\
4. Check SDK platforms available for building the versions of Android apps of interest.\
5. Setup Emulator, if not connected an actual physical phone (Actual phone preferred, as emulators take up a lot of computer resources). Ensure to         pick the emulator for your computer's processor.\
\
WORKING WITH ANDROID STUDIO\
1. Gradle is a project setup & build tool, that generates an apk file for app deployment. Ensure it finishes building when starting Android Studio.\
2. Main components of a project:\
	- .java file which has the java code powering the activities\
	- .xml file which has the layouts as viewed on the sample screen displayed. This has two modes, the graphical mode (Design tab & text mode 	which shows the xml code responsible for the current displayed layouts. Changing the code in this file changes the current project layouts.\
3.Start of working on a project by choosing an app theme (determines the overall look & feel)\
	- Via design view: Select from 'App Theme': On top of the layout view screen. (Note these these are separate from the layout files)\
	- Via xml: App>res>values>styles.xml\
4. Component tree: displays the layout type for the project and under it, all the visible components on the layout e.g textView, which displays text\
	- Selecting a component displays it properties in the attributes window.\
	- sp unit of measure (scalable pixel), density-independent pixels (dp)\
5. Errors and warnings appear under the orange exclamation sign under the layout view.\
6. All strings in the project just like the layouts and styles should also be in a separate file as resources and not hard coded i.e via the 		attributes window. To add an @string resource for this purpose:\
	- Open the strings.xml file and add it, going it a title and actual string.\
	- The in the attributes window under a component's /text/ field, link it to the resource by selecting it from the resource picker next to the 	attribute.\
7. Graphics like strings, styles, colours and layouts are app resources and are stored under res(resources) folder, and in this case, the drawable 	folder. To add an image, save an image in the above folder, then in AS, pick an imageView component from the palette drop it in the layout.\
	The property 'srcCompat' has the link to the saved image.\
8. XML(extensible markup language): a tree structured meta notation, a set of rule to follow like punctuation. Used to create tag sets and use them 	to describe data. 	\
	- The vocabulary of the tags differs in various application but the structure of the tags are the same i.e syntax and punctuation.\
	- Applications of XML include: HTML, RSS, SVG.\
9. AndroidManifest XML file is the file that holds information about the app, included resources it has and what the app is allowed to do etc. In 	here we can tell the app which launcher icon to use instead of the default, if we have included our customs ones. (Include different res 	images for the app launcher to accommodate different screen resolutions. The phone using the app will choose the launcher to use.\
10. An Android project (collection of files that make up the intended result) has four main elements:\
	- A manifest file: \
	- Java files: Programming logic of the app\
	- Resources: Design of the app (colours, strings, images, dimensions, layouts etc)\
	- Gradle files: App builder, collates all the required files, runs tests on the files and if passing produces an apk file that is used to 	instal the app.\
11. Visit flatuicolors.com for hex values for different colours.\
12. To create launcher icons of different sizes, right-click on the res folder and select image assets, select launcher	icons and pick a master image 	that is at least 512*512 pixels and this tool will generate an icon pack for all sizes required. (Largest icon as per google - 192*192. If we 	create the files manually, add them to their respective mipmap folders, then update the AndroidManifest.xml file with the new file names.\
	- Create both square and round ones.\
\
LAYOUTS (CONTAINERS FOR ARRANGING COMPONENTS ON THE SCREEN)\
1. Relative layout: Allows positioning components relative to each others position.\
2. Linear layout: Allows arranging of components vertically (on top of each other) or horizontally (side-by-side).\
\
LINKING COMPONENTS TO JAVA ACTIVITIES\
1. Create a variable to hold a layout element\
2. Retrieve the element and store it in the variable\
3. Use the element value stored in the variable to manipulate the element using Java code.\
\
ACTIVITIES\
- The entry point for a user's interaction with the app as well as navigation within the app, functionality for which is provided but the ACTIVITY class, by invoking an instance of the class.\
- The rationale for activities is because user interaction on a mobile platform does not always start from the same point like on a desktop platform i.e you can launch an app from theme screen or it can be launched from within another app. The calling app then invokes an activity in the other app rather than the app as a whole.\
- App activities as implemented by subclassing the Activity class.\
- Activities provide the window for am apps GUI which may fill the screen or not. An app may have multiple activities implementing different screens and some at the same time to display on different sections of the screen.\
- There is always a main activity which is implements the first screen on app launch, which then starts other activities.\
- Activities are strictly dependant on each other, hence the ability for cross-app activity invocation.\
- To use an activity in an app, it must be registered in the app's manifest and it's life cycle must be managed appropriately.\
\
DESIGN PATTERN\
- A proven blueprint/template for solving a problem in software engineering.\
- MVC is a way for devs to organise files & structure code. Each resource is maintained in a specific file and these file are organised in a specific way to reduce the complexity of the app, improves standardisation for app building, enforces modularisation and enhances concurrent development of all the app section.\
- The app code should also be organised in this way so that different code file do specific things an organised properly.\
- MVC: Models manages data between the app and the database, Views managed the UI and controllers handles the communications between the models and views.\
\
APP OVERVIEW\
- An app is made up of various part that communicate with each other to achieve a goal. These could be components e.g buttons which send messages like click an Android activity which then determines what should be done when such a message is received.\
- These parts are visible and invisible, one should learn how each of these part communicate.\
- When an app is launched, the onCreate() message is sent by the OS to the app's MainActivity to load up everything needed to display the app.\
- Apps are 'Event-driven' i.e work on the backdrop of events happening.\
\
ACTIVITY LIFECYCLE (Messages the app receives from the OS)\
- The lifecycle begins with when the app is launched, then it become visible to the user, then when the user switches to another app, it recedes into the background and if the user does not revert to it, it gets killed and system resources it was utilising get reclaimed for use by other apps.\
- The OS notifies the app of its state in each stage of it's life cycle , thus devs is make their apps respond to these messages.\
- Stages of an Android	app / Activity lift cycle are:\
	\
	1. Non-existent - app is not launched yet\
	2. Stopped - app is running in the background\
	3. Paused - app is active but not the currently main focus app\
	4. Running - app is fully in the foreground and the user is interacting with it\
\
NB) Only one activity across the entire Android system can be running at any one time, if another is becoming fully active, the current one will be paused.\
\
- OS messages to the app to notify it of its changing states:\
\
	1. OnCreate() - changes activity from non-existent to stopped: Loading up all resources into memory in preparation for display\
	2. OnStart() - changes activity from stopped to pause: activity is now visible.\
	3. OnResume() - changes activity from paused to running: activity is now in the foreground and the user can interact with it.\
	4. OnPause() - changes activity from running to paused: when the user  presses the power button or the screen has timed out. No user 				interaction, though app may be visible or partially visible. (You can continue with UI updates but saving user changes and data should be done here.\
	5. OnStop() - changes activity from paused to stopped: when the user presses the home button or launches another full screen app. App is running in the 	background. Prepare stopping UI updates e.g videos playing, stop camera etc.\
	6. OnDestroy() - changes activity from stopped to non-existent: activity is about to be shut done, thus close and clean up including closing remote 		server connections etc.\
\
- Activity life cyle with screen rotation: the app is killed then re-lauched with the new screen configs and goes through all the stages above, with an additional callback right after OnPause() called onSaveInstanceState(), where state data can be saved to ensure the app's current state continue right where it was left off e.g. game scores.\
\
CONSTRAINT LAYOUTS\
- Nested view hierarchies, layouts inside other layout then components in the nested layouts.\
- Hard layout values should be avoided, rather setting rules such as match_parent, wrap_content making the app adapt to the screen on which it is running.\
- As developers, do some research as to which devices we should support, since we can't support all the screen sizes, types and orientations.\
- Developer.android.com documentations & dashboard > Multiple screen offers stats on what screen are most popular, int terms of size and resolution.\
- Flat-view hierarchy, no nesting of layouts or components.\
- Constraint layout require dependancies in the grade file, thus converting from a nested hierarchy layout (with relative and linear layouts) to a flat hierarchy                    layout (with constraint layout). Creating a new constraint layout project will add these xml dependancies auto.\
\
NB) MATERIALSPALLETE.COM > Color palettes suited for android design.\
NB) RESOURCE QUALIFIERS - by Android to distinguish resources to be used for various circumstance e.g. image sizes based on screen size, different layouts based on the phone orientation, different string values for different locales etc.\
\
GRADLE\
- Tool used to configure and build files.\
- build.gradle (Project:) - contains info about the whole project (all modules)\
- build.gradle (Module.app) - info about a specific app/module within the project:\
	\
	1. minSdkVersion: tells the OS and play store the minimum android version the app can run on. Set based on the minimum sdk version you want to support\
	2. targetSdkVersion: tells the OS how to treat the app e.g look and feel by knowing which features are supported by the app. Usually better to set to the latest sdk 	version to support new features.\
	3. compileSdkvesion: tells gradle what sdk version to use to compile the app under development. Should be equal to the target sdk version, so as to enable the newest\
	android features in the app.\
\
- Dependancy Mgt: a dependancy is a library (code written by someone else to do something, mostly to enable the use of some features). If for example you want to include a cool feature in your app enabled by some library e.g .jar file (combination of java executable class files):\
\
	1. Change project view to 'project view'\
	2. Add a directory under your app folder and call it 'libs'\
	3. Download the .jar file and place it in the lib folder created\
	4. Ensure in build.gradle(Module.app) under 'dependancies' that the 'libs' folder is included \{(for v3) implementation fileTree('dir: 'libs', include: ['*.jar'])\} 	to ensure gradle includes the new file(s) when compiling the project. Then sync the project.\
\
- The above manual process is both tedious and does not update the libraries automatically to incorporate new features and bug fixes.\
- To automate the processes of adding dependancies in, use REPOS. The most common ones for android dependancies are JCenter and Maven Central. JCentre is included in build.gradle(Project: automatically for all projects and is the biggest java and android repo.\
- Include in the build.module(App) file the specific library URL from the specified repo to include under dependancies e.g. (for v3)implementation 'com.loopj.android:android-async-http:1.4.9' then sync the project for gradle to download and include the library.\
\
- To know which library to include google if it exists for a feature you would like to incorporate in your project, instead of having to re-create the feature.\
\
ANDROID MANIFEST FILE\
- This file contains details about the app and the permissions it has e.g what resource on the host OS and device it has access to.\
\
INTENT\
- Is an android component that handles intercommunication between apps and activities by holding and availing information about the task/job to done. The are used to navigate between activities and are also used to request for job handles for which no activity or app has been specified to handle, thus the OS will avail the activities and apps that are capable of handling the job request. They can also specify which particular activity should handle the job.\
- Intent filter are used by the OS to match activities to actions e.g the activity to start first when the app launches e.g MAIN. They also have categories to narrow down which components can handle and action. Android docs has many more category that can be used.\
- Extras are passed along in intents containing data that will passed across activities or apps.\
\
FIREBASE\
- Is a cloud service (paas) by Google.\
\
SHARED PREFERENCES: a way to save data locally on the device as a key-value pair.\
\
LISTVIEW\
- Used frequently in the android UI to display list style info e.g setting menu.\
- To use the list view needs an adapter to fetch data to display.\
\
VIEWHOLDER PATTERN\
- when using list views in android, to ensure a smooth scrolling experience, we use the viewHolder pattern to only hold views that ar visible in the phone memory and then only create list view objects to display the upcoming content on scroll, only if the phone does not have any availablle views to re-use. Re-using is more efficient than creating new view holder objects.\
\
NINE-PATCH\
- Type of multidimensional stretchable image (bitmap) that resizes auto to accommodate it's contents. Its applications include use as a speech bubble for chat messages. File naming convention is xxxx9.png and saved in the res/drawable folder.\
- You can create nine patch images in android studio, see docs.\
\
APP DESIGN\
- Emotional features of an app (look & feel) will help it stand out and make a user wanna use it, over and above the functionality (NB) Designer vs Non-designer thinking\
- Focus on color, fonts\
\
COLOR THEORY\
1. Colour Theory: (Advertising using this very well i.e. invoking the right mood via colours for example)\
	- Red: love, intensity, excitement, energy\
	- Yellow: joy, intellect, attention grabbing but not to look at for a long time, e.g app icon or app screenshot design for the App Store\
	- Green: safety, growth, freshness\
	- Blue: trust, stability, serenity\
	- Purple: wealth, royalty, femininity\
\
2. Selecting colours and building a colour palette (Use a colour wheel):\
	- Analogous colour palette: picking colours that are next to each other on the wheel. Create harmonious colour designs that that can be used for app backgrounds, 	main UI and are easy to look at for a long time\
	- Complementary colours: matching colours directly opposite each other on the colour wheel. They produce clashing colour designs that are not pleasant to look at for 	a long time but are attention grabbing. Can be used for logo design or screenshots. These can be toned down by using split colours design.\
	- Split colour design: instead of picking a complementary colour, pick either it of its analogous colour, such that you end up with a 3 colour design. These are 	great as an alternative to the complementary colours.\
	- Triadic colours: achieved by a 3 colour design palette derived from an equilateral triangle on the colour wheel. These are harmonious though look dated due to 	over-use in 90's advertising.\
	- Monochromatic colours: pick a colour and add various amounts of white or black to provide contrast. This is very modern and contemporary.\
\
3. Tools to quickly get colour palette:\
	- ColourHunt.com - Color paletter curation\
	- flatUIColors.com (used very much for IOS)\
	- MaterialPallette.com (used very much for android)\
	- ColorZilla - browser extension to fetch colour hex codes for sites that use colours you love.\
\
TYPOGRAPHY (Looks at font)\
1. Serif Font Family: Have the little 'feet' on the letter edges and origin from the Roman times where letters had to be curved into stone. They are thus an older style and have formal usage mostly. These are further broken down into:\
	- Old style serif typeface: used in the 1400's (oldest) e.g Adobe Jenson\
	- Transitional serif typeface: newer and modern looking e.g times new roman\
	- Modern serif typeface: very contemporary (cover of Vogue magazine) e.g Didot\
	- Slab-serif typeface: modern and designed to remove the typeface modulation across the other other serif typefaces. And was mainly created for newspaper printing.\
2. San Serif Family: Do not have the feet on the letters and are grouped into:\
	- Grotesque sans-serif: oldest sans-serif erg News Gothic\
	- Neo-Grotesque: e.g Helvetica, arial\
	- Humanist: e.g Gill Sans, Tahoma, Verdana\
	- Geometric: Futura, is equivalent-distant i.e has no modulation like in the other typefaces\
\
Typography and Readability:\
- Generally older typefaces are more readable eg. Grotesque vs Humanist (MIT conducted study), why:\
\
	(a) Open shapes e.g 'a', 'c\
	(b) Inter-character spacing\
	(c) Unambiguous forms e.g 'g' vs '9'\
	(d) Varying proportions e.g 'O', '0'\
\
Rules for combining Fonts:\
1. Serifs for headings and sans-serifs for the body and vice versa creates a good design look\
2. Don't use one typeface through out, it may look flat and undesigned\
3. Don't use more than 2 fonts.\
4. Don't use different era typefaces as it creates a confusing design look\
\
(NB) Rules of thumb: Keep the mood & era similar, contrast the serif-ness and the weights and stay away from comic sans, Papyrus, Viner, Curlz, Kristen and Greek symbol font.\
(NB) Difference between a typeface and a font, the font make up the typeface i.e fonts are subsets of a typeface e.g Garamond is a typeface and Garamond 12point, bold is a font.\
\
Tools for picking the right typeface\
	- What font - browser extension for fetching the font on a page\
	- Downloading fonts: font squirrel\
	- Sky fonts Mac app to include colours into apps quickly.\
\

\f1\b MOBILE UI DESIGN
\f0\b0 \
- Imagine an app is a visual journey and I am the tour guide. Split view into small digestible segments of text, media etc formatting each in using color shades to draw their attention on the various segments in different order.\
- Minimise the number of alignment lines and guide lines when designing the app UI:\
	\
	1. Edge alignment (Preferred)\
	2. Center alignment	 \
\
- Light should come from above i.e UI components e.g buttons should cast a shadow at the bottom in their unchecked state, but the shadow should disappear in their clicked states, providing a flash look with the surrounding.\
- Call to action buttons for example should be inviting, add border if flat design, use gradients, use images to describe what will happen if the button is clicked.\
- iOS = flat UI design, Android = material design\
\

\f1\b Colour in UI Design\

\f0\b0 - Start with a monochrome color (one e.g black, grey), so as to focus on placement, alignment etc.\
- Then add one color to draw attention to action component. And them go from there. START SIMPLE.\
- Checkout \'91dribble\'92 for design inspiration. Search by hex code to see the color implementation.\
\

\f1\b Make Text Visible on Images (Especially where the images changes color)
\f0\b0 \
- Contrast between the image and text where they don\'92t change\
- Black overlay on image (20% opacity)\
- Blur \
\

\f1\b Attention direction on text\

\f0\b0 - Different size\
- Different color\
- Different weights\
- Different caps\
- Spacing\
- Italics\
\

\f1\b MOBILE UX DESIGN (Stop Anti-patterns)\

\f0\b0 - Making an app a joy to use. (Pain-free)\
- Fundamental concepts for good UX design:\
- 
\f1\b USABILITY: 
\f0\b0 What is the app for. Make doing that easiest and as fast as possible with your app. \
- 
\f1\b ASKING FOR PERMISSIONS: 
\f0\b0 do this in small incremental steps not all at once.\
- 
\f1\b USER PROFILING: 
\f0\b0 know what the users want, by evaluating if the users are using the app for the intended purpose or not.\
- 
\f1\b FORM VS FUNCTION: 
\f0\b0 Always function over form (being to clever but not usable). GET A SECOND OPINION ON LIGHT-BULB DESIGN IDEAS
\f1\b \
- CONSISTENCY: 
\f0\b0 Is the design consistent with the brand, function.\
- 
\f1\b SIMPLICITY: 
\f0\b0 Is your app grandma proof? Offer the bear minimum in light of the app goal. Only add features as and when users demand them.\
- 
\f1\b DON\'92T MAKE THE USER THINK: 
\f0\b0 Use contextual tip here and there when it may be needed. Don\'92t front load! Dont confuse your users, make thing obvious.\
- 
\f1\b TEACHING WITHOUT TEACHING: 
\f0\b0 Using subtle hints to app functionality etc.\
- 
\f1\b DON\'92T SPELL THE OBVIOUS!
\f0\b0 \
\
\

\f1\b iOS vs ANDROID DESIGN\

\f0\b0 - Going back: A > historical iOS > hierarchical\
- Navigation: A > hamburger/ tabs iOS  > limited icon bars\
- Title A > Left aligned iOS > centre\
- Icons A > blocky iOS > thin and flat\
- Layout A > material iOS > flat\
- Visual hierarchy A > Using different font size iOS > using different font weights\
\
- Designing for the various platforms:\
	\
	1. Docs from both Apple and Google\
	2. Use the a device for the platform designing for for at least a month to get a feel of UX\
\

\f1\b MOBILE DESIGN WORKFLOW\

\f0\b0 1. Look at some professional design patterns (Links to websites in Section 21.1), for inspiration.\
2. Choose a color palette (colohunt.co), not the hex codes for the various color making up the palette.\
3. Create a user flow diagram: a high-level engineering diagram to design a user\'92s journey while navigating the UI:\
\
	a) Use rectangles to rep screens\
	b) Diamonds for decisions & actions\
	c) Arrows to link the above two\
\
(NB) 1. Instead of drawing up a flow diagram for the entire app journey, come up individual journey diagrams to decrease complexity.\
	2. Flow diagrams ensure you come up with a polished logic design for your up quickly before committing to time intensive and change restricting design or coding stages. Thus the process should be:\
\
		- Come up with flow diagram for each journey of your app\
		- Design the various components\
		- Code out the app\
4. Wireframing: Wireframes are low-fidelity representation of how the app will look in the future. They rough drawing mock ups (e.g various screens) of each view of the app showing placement of all components for referencing development.\
	\
	- Tools for professional wire framing: UI stencils e.g sketch pads and steel stencils. (PDF version available for download in Section 21.3)\
	- Pop app, that allows taking photos of your wireframes, link them via buttons to form a working prototype of your app.\
\
(NB) Before wire framing, familiarise with the android UI layout and look.\
5. Create mockups, which are high fidelity representation of the app i.e how they app will actually look in real life. These could be the various screens next to each other or the screen in a phone illustrating real world use. The pro tools to create these are Adobe illustrator or Adobe photoshop. These however are expensive and have a steep learning curve. For beginning designers:\
\
	- Sketch: a Mac app, costs $99, good for creating vector object (scale to any size) \{only in  illustrator. Download FREE sketch resources from sketch resources.com to quickly add them to sketch projects. You can use sketch to place mock ups in 	   actual phone frames.\
	- Canva.com web-based tool. Optimised for print design but can be used to design mobile app screens , specialised mobile components as limited though.\
	- Marvel: simple web based app for creating mockups.\
\
6. Create prototypes, which are an animation of the mockups to mimic the app as it will function in real life. They allow downloading mockups onto a phone to show off. Tools for creating prototypes:\
\
	- Marvelapp.com (create 3 app prototypes on a free account): Import the mockups from Sketch using a marvel sketch plugin from marvel site. (ALSO AVAILABLE AS A MOBILE APP)\
	- Invision\
	- Principle (Mac app, more like sketch and specialises in UI design)\
	- Proto.io\
	- Keynote\
\
(NB) Where to find free for commercial use photo images, vector images, icons, fonts etc: Section 22: Resources. \
\

\f1\b APP MARKETING (
\f0\b0 \ul IT IS A FALLACY TO THINK THAT A GREAT PRODUCT WILL SIMPLY SELL ITSELF!) (1 - 6 Months)\ulnone \
- Idea / product validation matters, by the target audience.\
- Lean-start-up methodology: starting with a minimum viable product then using end-user input to add on to it in every dev iteration so as to end up with a product that will be of interest to the users.\
- App zombies: app below the 25th listing in the App Store / app categories/ keywords. As at 2015 they stood at 90%!! This also varies between categories: weather: 50%, newsstand: 63%, navigation: 70% catalogs:76%, Health: 78%, Social Net:83%,\
 Productivity: 87%, Utilities: Travel: Education: Lifestyle: Entertainment > 87%\
\
1. Idea Validation/ product validation/ market validation: Which app idea should I invest resources in? Do I really need app or can the problem be solved in other better ways?\
- The fish way to build a product: Create the prototype > Raise funding > Build a team > Validate the market!\
- A more sure way to succeed: Validate the idea > create a prototype > get traction (potential for growth in user uptake) > raise funding\
- Way to validate ideas:\
\
	- Starbucks approach: Face-to-face pitch and listening to objective feedback. Learn to take constructive feedback e.g: Walk into Starbuck, offer to buy a stranger coffee and pitch, but tell them its another persons app make the feedback as objective\
	  as possible. ACTION is key to success not just the idea.\
	- Using Google trends to estimate your market size: By searching a keyword related to your app idea you can live data about the trends, location concentration, related searches etc to gain insight about the potential market.\
	- Using Google Adwords keyword planner: How many searches in Google for keywords related to your idea vs competition to gauge monitisation of the ideas etc.\
	- Landing Page validation: Create a simple catchy landing page telling people about your app and inviting them to sign up for first dibs on its launch. Gives insight into how many people are interested. Motivate traffic to the page via Google Adwords 	  keyword planner and facebook ads. Uses metrics such as engagement (interactions including pauses to look at) vs reach (how many saw your ad). Use different ads e.g with different images & wording and see which has the best numbers to use.\
		- Example Strategy: Max daily budget o $20, use automatic bidding for ad space, maximising clicks. Start off with a bid of $0.5 and increase by $0.25 per hr until clicks start coming through. Stop and observe for any conversions.\
		- One step further: Have a buy now button on you landing then ask for users to sign up, give more data ie. who would actually pay for your product.\
		- Landing page creation services links on Section 24.4.\
	- Creating an MVP: Where the user guide you through the app development e.g using FB pages to sample interest, gather suggestion, test out your concept e.g via email, text etc ideally of only the most basic/core features.\
	- Using crowd-funding to validate ideas: helps to answer the key question, will people actually buy your product. You ask people to pledge toward the app development in exchange for perks. Course on its own by Angela You.\
\
2. App monetisation:\
- People are less likely to buy app on the Google play store than on the Apple App Store!\
- Strategies for both options:\
	- On the Play store, devs offer free app and recoup investment via ads and collection and re-sale of user data (grey area) via app permissions!\
	- On the App store, ask to pay up front (Paid apps) but there is some trend towards adverts.\
- Success for paid apps:\
	- First 30 days of apps life in the store is crucial, thus the more traction the higher the chances of it ranked somewhere thereby getting more traction etc.\
	- Partnering with an influencer who can help generate the early bird buzz is one way to facilitate paid app success.\
	- If the app is really unique and innovative.\
 	- When you have rights to some resource that will be of interest to people, you can create a paid app to avail the resources.\
	- App pricing start at under $1.99 and only go above this if app is truly value-adding and spectacular. Play around with pricing and see user reaction to it to find the right balance.\
- In-app advertisements:\
	- Via banner which are served at the bottom or top of the screen at the discretion of ad companies. As a dev, strike the fine line between need for revenue and risk of bad app UX and user reviews.\
	- Interstitial full page ads that go away or allow dismissal after a certain amount of time. Forces the user to look at the ad.  Serve them at a point where the user is in a good mood!!\
	- In-content ads: appear as part of the app content and blend into the UI, but declared as ads. These can yield better click throughs than the previous two.\
- In-app purchases: Virtual purchases e.g game gems, lives etc attract 30% commission for the app stores, only non-virtual purchases are not subject to this charge.\
- Fremium model: app is free for some features but you must pay for extra features. Go for 20% premium or a majority of the features are free.\
- White labelling: building a general app then approaching a vendor to buy the app and then re-skin to their needs i.e add custom labels and branding, thus re-using the app.\
- Partnership model: partnering with a vendor to offer some incentives to users of the app say for achieving a milestone in a game app e.g discount off purchases, coupons and vouchers etc.\
- User data sales: A grey area that will be cracked down on by the app stores in the future.\
\
3. App optimisation for the app store:\
- App listing is what the user see when they search for your app, it components include:\
	- App icons: Must be well designed as its sets your app apart from other. Have it professionally done (e.g on Fiverrr) and ensure you have commercial right to the icon form the designer in writing and quality is as advertised.\
		- 99 Designs is another but samples of your desired designed are presented up front and you only pay when decide on a design.\
		- Ask for 5-6 with different variations to test which will result in the most uptakes from users, called A/B Split testing. Here one variation is shown to a subset of user and another to a different subset various statistics collected.\
		- The Google Play store implements split testing by allowing you to upload different variations of an icon and displaying each randomly and providing statics for each e.g downloads etc. The iOS App Store does not offer this. You have to		  manually upload and collect data on your own. Other site like StoreMaven can assist here.\
		- Qualities of a good app icon:\
			- Never use text in an icon as because it doesn\'92t scale well, unlike vector images\
			- Make it unique, brand relatable and memorable\
	- App Screenshots: How to get good screen shots:\
		- Screenshot of the app features in use with some text explaining the features\
		- Custom designed showcasing all the app features.\
		- Don\'92t use stock images, too much explanatory text or pixilated images\
		- Tools for creating screenshots:  mockUphone.com, Launchkit.io\
		- Split test your screenshots!!!!!\
\
4. Growth Hacking Techniques for app download (The Technium - 1,000 True fans)\
	- Don\'92t strive to build for the masses, market for 1,000 true fans by building for value addition to few rather than no value to many.\
	- Email Marketing:\
		- Collect email list of >10k of people who have committed to downloading and using the app. (Landing page)\
		- Only email people who want to hear from you, don\'92t spam people, who would not be interested.\
		-  Use of cognitive biases and heuristics.\
		- Blogging: Use Medium.com to create a development story for the app e.g. loose leaf. Create a following of fans not just customers.\
		- Content Marketing:  information oriented articles with catchy title to get following and use this to plug your app.\
		- Launch Sites: \
			- Site for discovering new or Cool tech e.g ProductHunt.com. First 24hrs of launch you app is live on the front page and have potential to be upvoted by relevant people in tech:\
			- Shoot to be live on the featured page. To end up here you must have been hunted by an influential person, the product hunt team or your app has a lot of traction.\
			- To end up on the featured page:  Look for influencers to hunt your products.\
			- Betalist (paid) for pre-launch betas.\
		- Cross promotion: teaming up with another developer to promote each others apps!\
		- Social referrals: via Maitre.com\
		- Try to get your app to do your social media for you.\
\
5. Get press coverage for your app:\
	- Pitch to journalist as the founder, if for a growing start-up (no PR firms) working on something interesting.\
	- Get exposure to the right forum for your target users.\
	- Craft an exciting stories for journalists to publish especially if your not known. Target small local publication and if successful, large publications will pick up on them.\
	- Have a short, clear elevator pitch for journalists.\
	- Use buzz sumo to find what which journalist likes and writes about. Learn them first prior to pitching to them.\
	 - Use voilaNobert.com to find interesting emails, get sidekick.com to track emails.\
	- Have Media resources ready with mast head and app logos and/or webpage screenshots, and great pitch email (template in lecture resources.\
	- Maintain relationships with journalists to help with your pitch because you are known.\
	- Paid app give away as a last ditch effort to get published to publications/ journalists.\
\
6. How to get your app featured on the App Store:\
	- High performance app in the first 24hr, 7days and 30days.\
	- Only on the apple App Store exclusivity will help i.e not on android\
	- Help Apple or Google for them to help you!\
	- Prefer native apps to hybrid app ie. apps that can be deployed to both app stores\
	- Localised app (translated to the top 12 languages)\
	- Design, design especially on iOS App Store where design is king.\
	- Get contacts.\
\
7. ASO (App Store Optimisation)\
\
(NB) App testing and test feedback:\
	- Monkop - UAto testing apk for bug reports etc.\
	- UserTesting.com - QA feedback on testing\
	- Preapps - feedback on icon, screenshots etc.\
	- Launch to a test audience first before target audience as sort of free bug testing.\
\
8. App ratings:\
	- Have a UX prompt not a \'92rate me prompt\'92\
	- In the prompt consider levels of UX e.g happy, confused or unhappy and take direct them to the right forum (Ember app in sec 32 of tutorial)\
	- Use Review Monitor tool to track your app reviews.\
\
9. App analytics to increase retention: Let the data guide future iterations of the app.\
	- Use default app store  analytics to track app performance\
	- Use Flurry by Yahoo (Customisable to add any metric needed) USING CODE.\
	- Mix panel easier and more intuitive to use\
\
10.  Both App Store monitor how long user spend on in an app and that contributes to the app ranking int the store I.e more than 30sec, use an intro video to take advantage of this.\
\
11. Creating a product page for your app:\
	- Use App-stop.appstop.com to create a simple product page instantly.\
	- Use Startbootstrap.com to use editable bootstrap templates.\
\
12. MY TURN: Marketing strategy check list in sec 36 + play sheet + email to get LondonApp brewery to assist with getting the word out there.\
\
\
\
\
\
\
\
\
\
\
\
\
}