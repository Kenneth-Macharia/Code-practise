A.LOCAL REPO:
-You can initial any folder as a new git repo > cd into folder > $git init or
  clone a remote repo locally and continue using it as a local (See section B)
-If this repo will be pushed to Github, its recommended that it has a README.md, .gitignore
  and LICENSE.md files in it's root i.e master branch. The later allows you to choose the
  license template you want on Github.
-Create a file on mac > $touch <file name>
-Edit a README using a text editor or CLI editor (nano or vim) using markdown, in order to properly
  display it on Github as a showcase for the project.
-Guidelines to creating a README : https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
-Git creates a .git file in this folder that will host all details of the repo to use.
  Always run git commands from within the folder containing this file or its sub folders.
-Check changes in repo > $git status
-Copy files in the local file system into the git staging area >$git add <filename> or
  >$git add . /$git add -A (adds all untracked changes to the staging area)
-Remove a file from the staging area >$git rm --cached <filename>
-Commit all changes to the local git repo >$git commit -m <"commit message">

B.REMOTE REPO (GITHUB):
-If local repo already exists (already initialized), you can push it to Github:
  1. On Github, create a repo and DON'T initialize with README, you can add locally and push it.
  2. Copy the HTTPS repo URL
  3. On the terminal and in the folder hosting the local repo >$git remote add origin <repo URL>
    which adds the local repo to the newly created remote repo.
  4. If commits have been made to the local repo, push them to remote repo > $git push (if the
    remote remote repo has the branch in which to push from) else >$git push --set upstream origin <branch name>,
    alternatively use >$git push origin <branch name> (which will create the branch remotely and push
    all commits to it)

-If local repo does not exist:
  1. Follow step one and two above
  2. Locally > cd into preferred folder > On terminal > $git clone <remote repo URL from github>

(NB)Cloning a specific branch from a repo: #git clone --single-branch -b <branch_name> <repo_URL>

C:ADVANCED GIT FOR COLLABORATION:
-Recommended git workflow: https://githubflow.github.io/
-Advanced git commands: https://gist.github.com/jedmao/5053440

D.SSH KEYS:
-For added security, you can use secure shell keys with the SSH protocol, to secure the link between
  the local and remote repo or between you local system and any other remote resource provider.
-SSH key has a private and public key. The former is used to encrypt and the latter to decrypt
  the encrypted data. Share the public key with services to interact with so that they can verify the
  data sent to them is from the intended source, because only the public key shared with them can
  decrypt the data, encrypted by the source private key.
-Detailed info on SSH :https://www.ssh.com/ssh/key/ and https://jumpcloud.com/blog/what-are-ssh-keys/
-For Github:
  1.At the terminal >$ssh-keygen (which generates the ssh key-value pair file). Leave the default file or
    select a different file if you have other keys generated ,then follow instructions.
  2.Copy the key path then run >$cat <path copied above> (which creates the key above)
  3.Copy the key generated above.
  4.On Github, profile > Edit profile > SSH and GPG keys > New SSH keys. Add a title and paste in key.
    ensure there are no spaces between any of the characters EXCEPT between the ssh*** header and the key
    body and add SSH key.
  5.When getting the remote repo URl, select the SSH version instead of HTTPs, to clone it or copy the local
   repo to it, and consequently no credentials will be required if working from the machine used to generate
   the SSH key.
